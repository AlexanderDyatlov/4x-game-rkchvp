import React, { useState, useEffect } from 'react';

const Civilopedia = ({ onClose, initialEntry, technologies, unitTypes, buildingTypes }) => {
    const [category, setCategory] = useState('unit');
    const [selectedItem, setSelectedItem] = useState(null);

    const allUnits = Object.values(unitTypes || {});
    const allBuildings = Object.values(buildingTypes || {});
    const allTechnologies = technologies || [];

    const RESOURCES_INFO = {
        fish: { name: "–†—ã–±–∞", icon: "üêü", description: "–ú–æ—Ä—Å–∫–æ–π —Ä–µ—Å—É—Ä—Å, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∏—â—É –ø—Ä–∏–±—Ä–µ–∂–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω –†—ã–±–∞—Ü–∫–æ–π –ª–æ–¥–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞.", yields: { food: 2 } },
        gems: { name: "–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏", icon: "üíé", description: "–†–æ—Å–∫–æ—à–Ω—ã–π —Ä–µ—Å—É—Ä—Å, –ø—Ä–∏–Ω–æ—Å—è—â–∏–π –∑–æ–ª–æ—Ç–æ. –†–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç—É–Ω–¥—Ä–µ –∏ –≥–æ—Ä–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö.", yields: { gold: 2 } }
    };

    const ALL_RESOURCE_IDS = Object.keys(RESOURCES_INFO);

    const TERRAIN_INFO = {
        water: { name: "–í–æ–¥–∞", description: "–û–±—à–∏—Ä–Ω—ã–µ –≤–æ–¥–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ü–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –º–æ—Ä—Å–∫–∏–º–∏ —é–Ω–∏—Ç–∞–º–∏. –ü—Ä–∏–±—Ä–µ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –º–æ–≥—É—Ç —Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä—Ç—ã.", icon: "üåä", food: 1, production: 0, gold: 0 },
        grass: { name: "–õ—É–≥–∞", description: "–ü–ª–æ–¥–æ—Ä–æ–¥–Ω—ã–µ —Ç—Ä–∞–≤—è–Ω–∏—Å—Ç—ã–µ –∑–µ–º–ª–∏, –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è —Ñ–µ—Ä–º–µ—Ä—Å—Ç–≤–∞. –í—ã—Å–æ–∫–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –ø–∏—â–∏.", icon: "üåø", food: 2, production: 0, gold: 0 },
        plains: { name: "–†–∞–≤–Ω–∏–Ω—ã", description: "–û—Ç–∫—Ä—ã—Ç—ã–µ —Ä–∞–≤–Ω–∏–Ω—ã, –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –∏ –ø–∞—Å—Ç–±–∏—â. –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–∏—â–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.", icon: "üåæ", food: 1, production: 1, gold: 0 },
        forest: { name: "–õ–µ—Å", description: "–ì—É—Å—Ç—ã–µ –ª–µ—Å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã. –ó–∞—Ç—Ä—É–¥–Ω—è—é—Ç –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–æ —Ö–æ—Ä–æ—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –ú–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—Ä—É–±–ª–µ–Ω—ã.", icon: "üå≤", food: 1, production: 2, gold: 0 },
        hills: { name: "–•–æ–ª–º—ã", description: "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å. –î–∞—é—Ç –∑–∞—â–∏—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–∏–Ω–µ—Ä–∞–ª—ã, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.", icon: "üåÑ", food: 1, production: 2, gold: 0 },
        mountain: { name: "–ì–æ—Ä—ã", description: "–ù–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º—ã–µ –≥–æ—Ä–Ω—ã–µ —Ü–µ–ø–∏. –ë–ª–æ–∫–∏—Ä—É—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–µ–º–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ü–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.", icon: "‚õ∞Ô∏è", food: 0, production: 1, gold: 0 },
        desert: { name: "–ü—É—Å—Ç—ã–Ω—è", description: "–ó–∞—Å—É—à–ª–∏–≤—ã–µ –∑–µ–º–ª–∏. –ú–∞–ª–æ –ø–∏—â–∏, –Ω–æ –º–æ–≥—É—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –æ–∞–∑–∏—Å—ã –∏–ª–∏ –∑–æ–ª–æ—Ç–æ.", icon: "üèúÔ∏è", food: 0, production: 0, gold: 1 },
        tundra: { name: "–¢—É–Ω–¥—Ä–∞", description: "–•–æ–ª–æ–¥–Ω—ã–µ, –±–µ–∑–ª–µ—Å–Ω—ã–µ –∑–µ–º–ª–∏. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞, –Ω–æ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.", icon: "‚ùÑÔ∏è", food: 1, production: 0, gold: 0 },
        jungle: { name: "–î–∂—É–Ω–≥–ª–∏", description: "–ì—É—Å—Ç—ã–µ –∏ –≤–ª–∞–∂–Ω—ã–µ –∑–∞—Ä–æ—Å–ª–∏. –ó–∞—Ç—Ä—É–¥–Ω—è—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ. –ú–æ–≥—É—Ç –±—ã—Ç—å –±–æ–≥–∞—Ç—ã —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –¥–∞–≤–∞—Ç—å –±–æ–Ω—É—Å –∫ –Ω–∞—É–∫–µ.", icon: "üå¥", food: 1, production: 1, science: 1 }
    };
    const ALL_TERRAIN_TYPES = Object.keys(TERRAIN_INFO);

    useEffect(() => {
        if (initialEntry) {
            setCategory(initialEntry.type);
            setSelectedItem(initialEntry.id);
        } else if (category === 'unit' && allUnits.length > 0 && !selectedItem) {
            setSelectedItem(allUnits[0].id);
        } else if (category === 'building' && allBuildings.length > 0 && !selectedItem) {
            setSelectedItem(allBuildings[0].id);
        } else if (category === 'technology' && allTechnologies.length > 0 && !selectedItem) {
            setSelectedItem(allTechnologies[0].id);
        } else if (category === 'resource' && ALL_RESOURCE_IDS.length > 0 && !selectedItem) {
            setSelectedItem(ALL_RESOURCE_IDS[0]);
        } else if (category === 'terrain' && ALL_TERRAIN_TYPES.length > 0 && !selectedItem) {
            setSelectedItem(ALL_TERRAIN_TYPES[0]);
        }
    }, [initialEntry, category, allUnits, allBuildings, allTechnologies, selectedItem, ALL_RESOURCE_IDS, ALL_TERRAIN_TYPES]);

    const techTranslations = {
        'agriculture': '–ó–µ–º–ª–µ–¥–µ–ª–∏–µ', 'archery': '–°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞', 'mining': '–ì–æ—Ä–Ω–æ–µ –¥–µ–ª–æ',
        'sailing': '–ú–æ—Ä–µ—Ö–æ–¥—Å—Ç–≤–æ', 'bronze_working': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∑—ã', 'writing': '–ü–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å',
        'woodworking': '–î–µ—Ä–µ–≤–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞', 'horseback_riding': '–í–µ—Ä—Ö–æ–≤–∞—è –µ–∑–¥–∞', 'currency': '–í–∞–ª—é—Ç–∞',
        'mathematics': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'naval_warfare': '–ú–æ—Ä—Å–∫–æ–π –±–æ–π',
    };
    const buildingUnitTranslations = {
        'GRANARY': '–ê–º–±–∞—Ä', 'SAWMILL': '–õ–µ—Å–æ–ø–∏–ª–∫–∞','MINE': '–®–∞—Ö—Ç–∞', 'LIBRARY': '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
        'MARKET': '–†—ã–Ω–æ–∫', 'HARBOR': '–ì–∞–≤–∞–Ω—å', 'SETTLER': '–ü–æ—Å–µ–ª–µ–Ω–µ—Ü', 'WARRIOR': '–í–æ–∏–Ω',
        'ARCHER': '–õ—É—á–Ω–∏–∫', 'HORSEMAN': '–í—Å–∞–¥–Ω–∏–∫', 'SWORDSMAN': '–ú–µ—á–Ω–∏–∫',
        'FISHING_BOAT': '–†—ã–±–∞—Ü–∫–∞—è –ª–æ–¥–∫–∞', 'GALLEY': '–ì–∞–ª–µ—Ä–∞', 'TRIREME': '–¢—Ä–∏—Ä–µ–º–∞'
    };
    const translateId = (id) => buildingUnitTranslations[id] || techTranslations[id] || id;

    const renderSelectedItem = () => {
        let selectedEntryData = null;
        let entryTypeForRender = category;

        if (category === 'unit') {
            selectedEntryData = allUnits.find(item => item.id === selectedItem);
        } else if (category === 'building') {
            selectedEntryData = allBuildings.find(item => item.id === selectedItem);
        } else if (category === 'technology') {
            selectedEntryData = allTechnologies.find(item => item.id === selectedItem);
        } else if (category === 'terrain') {
            selectedEntryData = TERRAIN_INFO[selectedItem] ? { ...TERRAIN_INFO[selectedItem], id: selectedItem } : null;
            if (selectedEntryData) entryTypeForRender = 'terrain';
        } else if (category === 'resource') {
            selectedEntryData = RESOURCES_INFO[selectedItem] ? { ...RESOURCES_INFO[selectedItem], id: selectedItem } : null;
            if (selectedEntryData) entryTypeForRender = 'resource';
        }

        if(selectedEntryData && !selectedEntryData.typeAsProp) {
            selectedEntryData.typeAsProp = entryTypeForRender;
        }

        return selectedEntryData ? renderEntryDetails(selectedEntryData) : (
            <div className="flex-1 flex items-center justify-center p-6">
                <p className="text-stone-400 text-lg">–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
            </div>
        );
    };

    const renderEntryDetails = (entry) => {
        let title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        let icon = "‚ùì";
        const currentEntryType = entry.typeAsProp || category;

        if (currentEntryType === 'unit') {
            title = entry.type;
            icon = entry.icon || "üë§";
        } else if (currentEntryType === 'building') {
            title = entry.name;
            icon = entry.icon || "üèõÔ∏è";
        } else if (currentEntryType === 'technology') {
            title = entry.name;
            icon = "üî¨";
        } else if (currentEntryType === 'terrain') {
            title = entry.name;
            icon = entry.icon || "üåç";
        } else if (currentEntryType === 'resource') {
            title = entry.name;
            icon = entry.icon || "üíé";
        }

        return (
            <div className="flex-1 overflow-y-auto p-6 bg-stone-800/50">
                <div className="max-w-2xl mx-auto bg-stone-700/70 rounded-lg border border-stone-600 p-6 shadow-xl">
                    <div className="flex items-start mb-6">
                        <div className="text-6xl mr-6 p-2 bg-stone-800/50 rounded-md shadow">{icon}</div>
                        <div className="flex-1">
                            <h3 className="text-3xl font-bold text-amber-300 mb-2">{title}</h3>
                            {currentEntryType === 'unit' && (
                                <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm text-stone-200">
                                    {entry.attack !== undefined && <p>‚öîÔ∏è –ê—Ç–∞–∫–∞: <span className="font-semibold">{entry.attack}</span></p>}
                                    {entry.defense !== undefined && <p>üõ°Ô∏è –ó–∞—â–∏—Ç–∞: <span className="font-semibold">{entry.defense}</span></p>}
                                    {entry.maxHealth !== undefined && <p>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <span className="font-semibold">{entry.maxHealth}</span></p>}
                                    {entry.maxMoves !== undefined && <p>üèÉ –î–≤–∏–∂–µ–Ω–∏–µ: <span className="font-semibold">{entry.maxMoves}</span></p>}
                                    {entry.attackRange > 1 && <p>üéØ –î–∞–ª—å–Ω–æ—Å—Ç—å: <span className="font-semibold">{entry.attackRange}</span></p>}
                                    {entry.naval && <p className="text-blue-300 col-span-2">üåä –ú–æ—Ä—Å–∫–æ–π —é–Ω–∏—Ç</p>}
                                    {entry.productionCost !== undefined && <p>‚öíÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <span className="font-semibold">{entry.productionCost}</span></p>}
                                    {entry.maintainCost > 0 && <p>üí∞ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: <span className="font-semibold">{entry.maintainCost}</span></p>}
                                </div>
                            )}
                            {currentEntryType === 'building' && (
                                <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm text-stone-200">
                                    {entry.effect === 'food' && <p>üåæ –≠—Ñ—Ñ–µ–∫—Ç: <span className="font-semibold">+{entry.bonus} –ø–∏—â–∏</span></p>}
                                    {entry.effect === 'production' && <p>ü™µ –≠—Ñ—Ñ–µ–∫—Ç: <span className="font-semibold">+{entry.bonus} –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</span></p>}
                                    {entry.effect === 'gold' && <p>üí∞ –≠—Ñ—Ñ–µ–∫—Ç: <span className="font-semibold">+{entry.bonus} –∑–æ–ª–æ—Ç–∞</span></p>}
                                    {entry.effect === 'science' && <p>üìö –≠—Ñ—Ñ–µ–∫—Ç: <span className="font-semibold">+{entry.bonus} –Ω–∞—É–∫–∏</span></p>}
                                    {entry.effect === 'naval' && <p>‚öì –≠—Ñ—Ñ–µ–∫—Ç: <span className="font-semibold">+{entry.bonus} (–º–æ—Ä—Å–∫–æ–π)</span></p>}
                                    {entry.productionCost !== undefined && <p>‚öíÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <span className="font-semibold">{entry.productionCost}</span></p>}
                                    {entry.maintainCost > 0 && <p>üí∞ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: <span className="font-semibold">{entry.maintainCost}</span></p>}
                                </div>
                            )}
                            {currentEntryType === 'technology' && (
                                <div className="space-y-1 text-sm text-stone-200">
                                    <p>‚è≥ –≠–ø–æ—Ö–∞: <span className="font-semibold">{entry.era}</span></p>
                                    <p>üî¨ –°—Ç–æ–∏–º–æ—Å—Ç—å: <span className="font-semibold">{entry.cost} –Ω–∞—É–∫–∏</span></p>
                                    {entry.prerequisites && entry.prerequisites.length > 0 && (
                                        <p>üîë –¢—Ä–µ–±—É–µ—Ç—Å—è: <span className="font-semibold">{entry.prerequisites.map(techId => allTechnologies.find(t=>t.id === techId)?.name || techId).join(', ')}</span></p>
                                    )}
                                </div>
                            )}
                            {currentEntryType === 'terrain' && (
                                <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm text-stone-200">
                                    <p>üåø –ü–∏—â–∞: <span className="font-semibold">{entry.food || 0}</span></p>
                                    <p>‚öíÔ∏è –ü—Ä–æ–∏–∑-–≤–æ: <span className="font-semibold">{entry.production || 0}</span></p>
                                    <p>üí∞ –ó–æ–ª–æ—Ç–æ: <span className="font-semibold">{entry.gold || 0}</span></p>
                                    <p>üî¨ –ù–∞—É–∫–∞: <span className="font-semibold">{entry.science || 0}</span></p>
                                </div>
                            )}
                            {currentEntryType === 'resource' && (
                                <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm text-stone-200">
                                    {entry.yields?.food > 0 && <p>üåø –ü–∏—â–∞: <span className="font-semibold">+{entry.yields.food}</span></p>}
                                    {entry.yields?.production > 0 && <p>‚öíÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: <span className="font-semibold">+{entry.yields.production}</span></p>}
                                    {entry.yields?.gold > 0 && <p>üí∞ –ó–æ–ª–æ—Ç–æ: <span className="font-semibold">+{entry.yields.gold}</span></p>}
                                    {entry.yields?.science > 0 && <p>üî¨ –ù–∞—É–∫–∞: <span className="font-semibold">+{entry.yields.science}</span></p>}
                                    {entry.yields?.culture > 0 && <p>üé≠ –ö—É–ª—å—Ç—É—Ä–∞: <span className="font-semibold">+{entry.yields.culture}</span></p>}
                                </div>
                            )}
                        </div>
                    </div>

                    <p className="text-stone-100 text-base mb-6 leading-relaxed">{entry.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."}</p>

                    {(currentEntryType === 'unit' || currentEntryType === 'building') && entry.requiresTech && (
                        <div className="mt-4 p-3 bg-stone-800/60 rounded-md border border-stone-600">
                            <p className="text-sm text-amber-400">–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è: <span className="font-semibold text-amber-200">{allTechnologies.find(t=>t.id === entry.requiresTech)?.name || entry.requiresTech}</span></p>
                        </div>
                    )}

                    {currentEntryType === 'technology' && entry.unlocks && entry.unlocks.length > 0 && (
                        <div className="mt-4 p-3 bg-stone-800/60 rounded-md border border-stone-600">
                            <p className="text-sm text-amber-400 mb-1">–û—Ç–∫—Ä—ã–≤–∞–µ—Ç:</p>
                            <ul className="list-disc list-inside text-sm text-stone-200 space-y-0.5">
                                {entry.unlocks.map((itemId, idx) => (
                                    <li key={idx}>{translateId(itemId)}</li>
                                ))}
                            </ul>
                        </div>
                    )}

                    {currentEntryType === 'unit' && (
                        <div className="mt-6 p-4 bg-stone-800/60 rounded-md border border-stone-600">
                            <h4 className="text-lg font-semibold text-amber-400 mb-2">–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</h4>
                            <p className="text-sm text-stone-200 leading-normal">
                                {`–Æ–Ω–∏—Ç "${title}" `}
                                {entry.naval ? "–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –≤–æ–¥–µ. " : "—è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–µ–º–Ω—ã–º —é–Ω–∏—Ç–æ–º. "}
                                {entry.attack === 0 && entry.type === '–ü–æ—Å–µ–ª–µ–Ω–µ—Ü' ? "–ù–µ –±–æ–µ–≤–æ–π —é–Ω–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å–Ω–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤. " : ""}
                                {entry.attack > 0 && entry.attack <= 5 ? "–û–±–ª–∞–¥–∞–µ—Ç —Å–ª–∞–±–æ–π –∞—Ç–∞–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–∞–∑–≤–µ–¥–∫–∏ –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ. " : ""}
                                {entry.attack > 5 && entry.attack <= 10 ? "–•–æ—Ä–æ—à–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–µ—Ü. " : ""}
                                {entry.attack > 10 ? "–û–±–ª–∞–¥–∞–µ—Ç —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–π –∞—Ç–∞–∫–æ–π! " : ""}
                                {entry.defense <= 3 ? "–ò–º–µ–µ—Ç —Å–ª–∞–±—É—é –∑–∞—â–∏—Ç—É. " : ""}
                                {entry.defense > 3 && entry.defense <= 7 ? "–û–±–ª–∞–¥–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –∑–∞—â–∏—Ç–æ–π. " : ""}
                                {entry.defense > 7 ? "–û—Ç–ª–∏—á–Ω–æ –∑–∞—â–∏—â–µ–Ω. " : ""}
                                {entry.maxMoves >= 4 ? "–û—á–µ–Ω—å –º–æ–±–∏–ª–µ–Ω. " : ""}
                                {entry.maxMoves <= 2 ? "–ò–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å. " : ""}
                                {entry.attackRange > 1 ? `–ú–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${entry.attackRange} –∫–ª. ` : ""}
                            </p>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    return (
        <div
            className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={(e) => {
                if (e.target === e.currentTarget) {
                    onClose();
                }
            }}
        >
            <div
                className="bg-stone-800 w-full max-w-5xl h-[90vh] rounded-xl shadow-2xl flex flex-col border border-amber-700/50 overflow-hidden"
                onClick={(e) => e.stopPropagation()}
            >
                <div className="bg-stone-900 border-b border-amber-600 p-4 flex justify-between items-center">
                    <h2 className="text-2xl text-amber-400 font-bold">–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫</h2>
                    <button
                        className="px-3 py-1 bg-red-700 hover:bg-red-600 text-white rounded text-sm"
                        onClick={onClose}
                    >
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>

                <div className="flex-1 flex overflow-hidden">
                    <div className="w-64 bg-stone-800 border-r border-stone-700 flex flex-col">
                        <div className="p-3 border-b border-stone-600">
                            <h3 className="text-amber-300 font-semibold mb-2 text-sm">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                            <div className="space-y-1">
                                {[{id: 'unit', name: '–Æ–Ω–∏—Ç—ã'}, {id: 'building', name: '–ó–¥–∞–Ω–∏—è'}, {id: 'technology', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'}, {id: 'resource', name: '–†–µ—Å—É—Ä—Å—ã'}, {id: 'terrain', name: '–ú–µ—Å—Ç–Ω–æ—Å—Ç—å'}].map(cat => (
                                    <button
                                        key={cat.id}
                                        className={`w-full text-left px-3 py-1.5 text-xs rounded ${category === cat.id ? 'bg-amber-600 text-white' : 'bg-stone-700 text-stone-200 hover:bg-stone-600'}`}
                                        onClick={() => {
                                            setCategory(cat.id);
                                            if (cat.id === 'unit') setSelectedItem(allUnits[0]?.id || null);
                                            else if (cat.id === 'building') setSelectedItem(allBuildings[0]?.id || null);
                                            else if (cat.id === 'technology') setSelectedItem(allTechnologies[0]?.id || null);
                                            else if (cat.id === 'resource') setSelectedItem(ALL_RESOURCE_IDS[0] || null);
                                            else if (cat.id === 'terrain') setSelectedItem(ALL_TERRAIN_TYPES[0] || null);
                                        }}
                                    >
                                        {cat.name}
                                    </button>
                                ))}
                            </div>
                        </div>
                        <div className="flex-1 overflow-y-auto p-3">
                            {category === 'unit' && allUnits.map(item => (
                                <button key={item.id} className={`w-full text-left p-2 text-xs rounded flex items-center mb-1 ${selectedItem === item.id ? 'bg-amber-700 text-white' : 'hover:bg-stone-700/50 text-stone-200'}`} onClick={() => setSelectedItem(item.id)}>
                                    <span className="mr-2 text-base">{item.icon || 'üë§'}</span><span>{item.type}</span>
                                </button>
                            ))}
                            {category === 'building' && allBuildings.map(item => (
                                <button key={item.id} className={`w-full text-left p-2 text-xs rounded flex items-center mb-1 ${selectedItem === item.id ? 'bg-amber-700 text-white' : 'hover:bg-stone-700/50 text-stone-200'}`} onClick={() => setSelectedItem(item.id)}>
                                    <span className="mr-2 text-base">{item.icon || 'üèõÔ∏è'}</span><span>{item.name}</span>
                                </button>
                            ))}
                            {category === 'technology' && allTechnologies.map(item => (
                                <button key={item.id} className={`w-full text-left p-2 text-xs rounded flex items-center mb-1 ${selectedItem === item.id ? 'bg-amber-700 text-white' : 'hover:bg-stone-700/50 text-stone-200'}`} onClick={() => setSelectedItem(item.id)}>
                                    <span className="mr-2 text-base">üî¨</span><span>{item.name}</span>
                                </button>
                            ))}
                            {category === 'resource' && ALL_RESOURCE_IDS.map(resId => (
                                <button
                                    key={resId}
                                    className={`w-full text-left p-2 text-xs rounded flex items-center mb-1 ${selectedItem === resId ? 'bg-amber-700 text-white' : 'hover:bg-stone-700/50 text-stone-200'}`}
                                    onClick={() => setSelectedItem(resId)}
                                >
                                    <span className="mr-2 text-base">{RESOURCES_INFO[resId]?.icon || 'üíé'}</span>
                                    <span>{RESOURCES_INFO[resId]?.name || resId}</span>
                                </button>
                            ))}
                            {category === 'terrain' && ALL_TERRAIN_TYPES.map(terrainId => (
                                <button key={terrainId} className={`w-full text-left p-2 text-xs rounded flex items-center mb-1 ${selectedItem === terrainId ? 'bg-amber-700 text-white' : 'hover:bg-stone-700/50 text-stone-200'}`} onClick={() => setSelectedItem(terrainId)}>
                                    <span className="mr-2 text-base">{TERRAIN_INFO[terrainId]?.icon || 'üåç'}</span><span>{TERRAIN_INFO[terrainId]?.name || terrainId}</span>
                                </button>
                            ))}
                        </div>
                    </div>
                    {renderSelectedItem()}
                </div>
            </div>
        </div>
    );
};

export default Civilopedia;